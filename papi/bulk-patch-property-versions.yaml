---
  openapi: "3.0.0"
  servers:
    - url: https://akzz-XXXXXXXXXXXXXXXX-XXXXXXXXXXXXXXXX.luna.akamaiapis.net/papi/v1
  info:
    title: "Bulk patches"
    version: v1
  paths:
    /bulk/rules-patch-requests:
      post:
        summary: Bulk patch a set of properties
        description: |
          Apply a series of JSON Patch
          operations to modify a set of property versions. Form this set
          of `patches` based on the
          [JSONPath](http://goessner.net/articles/JsonPath/) locations
          from a [bulk search](https://papi-akamai.readme.io/reference/bulkrules-search-requests#post_bulk-rules-search-requests) response. Specify a set
          of new property versions based on the results of a
          [bulk versioning](https://papi-akamai.readme.io/reference/bulkproperty-version-creations#post_bulk-property-version-creations) operation. The
          request is a [BulkPatch](#bulkpatch) POST object. This
          operation launches an asynchronous process to update rule
          trees. To check its progress, run the [List bulk-updated
          properties](https://papi-akamai.readme.io/reference/bulkrules-patch-requestsbulkpatchid#get_bulk-rules-patch-requests-bulkpatchid) operation, whose link is available
          in the `Location` header or `bulkPatchLink` member of this
          operation's response. See
          [Bulk Search and Update](doc:learn-about-bulk)
          for overall guidance on this feature.
        operationId: "POST_bulk-rules-patch-requests"
        responses:
          202:
            description: ""
            headers:
              Location:
                schema:
                  type: string
            content:
              application/json:
                example:
                  bulkPatchLink: "/papi/v0/bulk/rules-patch-requests/42"
                schema:
                  $ref: "#/components/schemas/bulk-patch-post-response"
        requestBody:
          required: true
          content:
            application/json:
              example:
                patchPropertyVersions:
                  - propertyId: prp_1
                    propertyVersion: 1
                    etag: a87v5c65c6821bc
                    patches:
                      - op: replace
                        value: on
                        path: "/rules/children/1/features/3/option/enabled"
                      - op: replace
                        value: on
                        path: "/rules/children/1/features/0/option/enabled"
                  - propertyId: prp_15
                    propertyVersion: 2
                    etag: "6c7v5c65c6cvcv65"
                    patches:
                      - op: replace
                        value: on
                        path: "/rules/children/1/children/0/features/1/enabled"
                  - propertyId: prp_3
                    propertyVersion: 10
                    etag: "1f8903bcde2f3"
                    patches:
                      - op: replace
                        value: on
                        path: "/rules/children/0/children/1/children/2/features/1/enabled"
              schema:
                $ref: "#/components/schemas/bulk-patch-create-request"
        parameters:
          - name: "PAPI-Use-Prefixes"
            description: |
              Sets whether to display three-letter prefixes in various ID values in response data. This may override the client's default `usePrefixes` setting. See [ID Prefixes](doc:id-prefixes).
            in: header
            required: true
            schema:
              type: string
          - $ref: "#/components/parameters/trait_contractParamOptionalBulk_contractId"
          - $ref: "#/components/parameters/trait_groupParamOptionalBulk_groupId"
    /bulk/rules-patch-requests/{bulkPatchId}:
      get:
        summary: List bulk-patched properties
        description: |
          List all modified property versions that result from a [bulk patch](https://papi-akamai.readme.io/reference/bulkrules-patch-requests#post_bulk-rules-patch-requests) request, and poll the asynchronous process's status. The response is a [BulkPatch](#bulkpatch) object. Once the overall `bulkPatchStatus` is `COMPLETE`, you can feed all successfully updated property versions whose `status` is `UPDATED` into a subsequent request to [bulk activate](https://papi-akamai.readme.io/reference/bulkactivations#post_bulk-activations) them. See [Bulk Search and Update](doc:learn-about-bulk) for overall guidance on this feature.
        operationId: "GET_bulk-rules-patch-requests-bulkPatchId"
        responses:
          200:
            description: ""
            content:
              application/json:
                example:
                  bulkPatchId: 7
                  bulkPatchStatus: "COMPLETE"
                  bulkPatchSubmitDate: "2018-01-18T00:00:00Z"
                  bulkPatchUpdateDate: "2018-01-18T01:00:00Z"
                  patchPropertyVersions:
                    - patchPropertyId: prp_1
                      patchPropertyVersion: 2
                      patchPropertyVersionStatus: "COMPLETE"
                      patchSubmitDate: "2018-01-18T00:00:00Z"
                      patchUpdateDate: "2018-01-18T00:00:00Z"
                      etag: a9dfe78cf93090516bde891d009eaf57
                      propertyVersionRulesLink: "/papi/v1/properties/prp_1/versions/1/rules"
                      patches:
                        - op: replace
                          value: on
                          path: "/rules/children/1/features/3/option/enabled"
                        - op: replace
                          value: on
                          path: "/rules/children/1/features/0/option/enabled"
                      papiErrors:
                        - type: "https://problems.luna.akamaiapis.net/papi/v0/validation/attribute_required"
                          title: "Attribute not specified"
                          detail: "The Verification Settings option on the `Origin Server` behavior is required."
                          instance: "https://control.sqa2.qa.akamai.com/papi/v0/bulk/activations/1?contractId=ctr_1-1TJZH5&groupId=grp_15225#853080b7-e411-432d-99ae-967e56b50d72"
                          errorLocation: "#/rules/behaviors/0/options/verificationMode"
                      papiWarnings:
                        - type: "https://problems.luna.akamaiapis.net/papi/v0/validation/product_behavior_issue.cpcode_incorrect_product"
                          title: "Unstable rule format"
                          detail: "The CP Code within `Content Provider Code` isn't configured for use with the product used by this property, Dynamic Site Accelerator. Traffic for this property might not show up under the correct traffic reports."
                          instance: "https://control.sqa2.qa.akamai.com/papi/v0/bulk/activations/1?contractId=ctr_1-1TJZH5&groupId=grp_15225#853080b7-e411-432d-99ae-967e56b50d72"
                          errorLocation: "#/rules/behaviors/1/options/value"
                    - patchPropertyId: prp_15
                      patchPropertyVersion: 3
                      patchPropertyVersionStatus: "SUBMISSION_ERROR"
                      patchSubmitDate: "2018-01-18T00:00:00Z"
                      patchUpdateDate: "2018-01-18T00:00:00Z"
                      fatalError: "BAD SYNTAX UNABLE TO SAVE"
                      patches:
                        - op: replace
                          value: on
                          path: "/rules/children/1/children/0/features/1/enabled"
                    - patchPropertyId: prp_3
                      patchPropertyVersion: 11
                      patchPropertyVersionStatus: "COMPLETE"
                      patchSubmitDate: "2018-01-18T00:00:00Z"
                      patchUpdateDate: "2018-01-18T00:00:00Z"
                      etag: a9dfe78cf93090516bde891d009eaf57
                      propertyVersionRulesLink: "/papi/v1/properties/prp_3/versions/1/rules"
                      patches:
                        - op: replace
                          value: on
                          path: "/rules/children/0/children/1/children/2/features/1/enabled"
                schema:
                  $ref: "#/components/schemas/bulk-patch-get-response"
        parameters:
          - $ref: "#/components/parameters/trait_usePrefixesHeader_PAPI-Use-Prefixes"
          - $ref: "#/components/parameters/trait_contractParamOptionalBulk_contractId"
          - $ref: "#/components/parameters/trait_groupParamOptionalBulk_groupId"
      parameters:
        - name: bulkPatchId
          in: path
          required: true
          description: |
            Identifies each bulk patch job.
          schema:
            type: integer
  components:
    schemas:
      bulk-patch-create-request:
        type: object
        required:
          - "patchPropertyVersions"
        properties:
          patchPropertyVersions:
            type: array
            items:
              type: object
              required:
                - "propertyId"
                - "propertyVersion"
                - "patches"
              properties:
                propertyId:
                  pattern: "^(prp_|PRP_)?[0-9]+$"
                  description: |
                    Uniquely identifies the [property](#property) associated with this property version, or its component rules or hostnames. See [Data conventions](doc:data-conventions) for details on how to omit the ID's `prp_` prefix.
                  type: string
                propertyVersion:
                  description: |
                    A positive integer identifying the incremental version.
                  type: integer
                patches:
                  type: array
                  items:
                    description: |
                      one JSON Patch operation
                    type: object
                etag:
                  description: |
                    A digest with which to check the data's integrity. See [Concurrency control](doc:concurrency-control) for guidance.
                  type: string
      bulk-patch-get-response:
        description: |
          Encapsulates customized JSON patch instructions to run on a set of JSON path locations within various property versions' rule trees. See [Bulk Search and Update](doc:learn-about-bulk) for guidance on this feature.
        type: object
        required:
          - "bulkPatchId"
          - "bulkPatchStatus"
          - "bulkPatchSubmitDate"
          - "patchPropertyVersions"
        properties:
          bulkPatchId:
            description: |
              Identifies each bulk patch process.
            type: integer
          bulkPatchStatus:
            description: |
              Reflects the status of the entire bulk update request, either `PENDING`, `IN_PROGRESS`, or `COMPLETE`.
            type: string
            enum:
              - "PENDING"
              - "COMPLETE"
              - "IN_PROGRESS"
          bulkPatchSubmitDate:
            description: |
              An ISO 8601 timestamp indicating when you first made the bulk patch request.
            type: string
          bulkPatchUpdateDate:
            description: |
              An ISO 8601 timestamp indicating when any of the property versions' `status` value last changed.
            type: string
          message:
            description: |
              A notification in case the bulk request repeatedly fails to process.
            type: string
          patchPropertyVersions:
            type: array
            items:
              description: |
                Specifies JSON patch instructions to modify each property version.
              type: object
              required:
                - "patchPropertyId"
                - "patchPropertyVersion"
                - "patches"
              properties:
                etag:
                  description: |
                    An `etag` value that matches the state of the property you want to modify. When specified as part of the bulk patch request, it causes this property's update to fail if someone else modifies the property in the meantime. See [Concurrency control](doc:concurrency-control) for guidance on this feature.
                  type: string
                papiErrors:
                  type: array
                  items:
                    description: |
                      Lists any validation errors resulting from the bulk update, which would prevent you from including this property version in a bulk activation. These are the same type of validation errors PAPI allows you to save in a property version, not to be confused with a `fatalError` that prevents it from being saved.
                    type: object
                    properties:
                      title:
                        description: |
                          A descriptive label for each type of error.
                        type: string
                      type:
                        description: |
                          A URI that identifies each error case. See the [Errors](doc:papi-errors) section for details on each.
                        type: string
                      instance:
                        description: |
                          A URI that identifies each error's occurrence, possibly useful when communicating with Akamai customer support.
                        type: string
                      errorLocation:
                        description: |
                          A JSON Path expression that locates the rule tree node where the problem occurred.
                        type: string
                      detail:
                        description: |
                          Provides context for the problem that triggered the error.
                        type: string
                papiWarnings:
                  type: array
                  items:
                    description: |
                      Lists any validation warnings resulting from the bulk update, which you'd need to acknowledge when bulk-activating property versions.
                    type: object
                    properties:
                      title:
                        description: |
                          A descriptive label for each type of warning.
                        type: string
                      type:
                        description: |
                          A URI that identifies each warning case. See the [Errors](doc:papi-errors) section for details on each.
                        type: string
                      instance:
                        description: |
                          A URI that identifies each warning's occurrence, possibly useful when communicating with Akamai customer support.
                        type: string
                      errorLocation:
                        description: |
                          A JSON Path expression that locates the rule tree node where the problem occurred.
                        type: string
                      detail:
                        description: |
                          Provides context for the problem that triggered the warning.
                        type: string
                patchPropertyId:
                  description: |
                    Identifies the property you want to modify as part of the bulk patch.
                  type: string
                patchPropertyVersion:
                  description: |
                    The version of the property you want to modify as part of the bulk patch.
                  type: integer
                patchSubmitDate:
                  description: |
                    An ISO 8601 timestamp indicating when the request to modify this property version's rule tree occurred.
                  type: string
                patchUpdateDate:
                  description: |
                    An ISO 8601 timestamp indicating when this property version's `status` last changed, usually indicating when the update completed.
                  type: string
                fatalError:
                  description: |
                    Indicates an error that prevented this property version from updating, such as malformed JSON Patch instructions or resulting rule tree data formatting. This type of error isn't the same as the `papiErrors` you're allowed to save on a property version, but not to activate.
                  type: string
                patches:
                  type: array
                  items:
                    description: |
                      Represents each instruction to modify part of a rule tree.
                    type: object
                    required:
                      - "op"
                      - "path"
                      - "value"
                    properties:
                      op:
                        description: |
                          The JSON Patch operation to perform, either `replace`, `add`, `remove`, or `test`. For various techniques to use these operations, see [Bulk Search and Update](doc:learn-about-bulk).
                        type: string
                        enum:
                          - "replace"
                          - "add"
                          - "remove"
                          - "test"
                      path:
                        description: |
                          A JSONPath expression that locates the value to replace within the rule tree.
                        type: string
                      value:
                        description: |
                          Specifies the replacement value. This needs to correspond to the original matched value's data type, otherwise the rule tree fails to update.
                        type: string
                        allOf:
                          - type: string
                          - type: number
                          - type: boolean
                propertyVersionRulesLink:
                  description: |
                    An API hypermedia link to get specific rule trees after they're updated.
                  type: string
                patchPropertyVersionStatus:
                  description: |
                    Indicates progress for the update to this property version's rule tree, either `PENDING`, `SUBMITTED`, `IN_PROGRESS`, or `COMPLETE` for success. A `SUBMISSION_ERROR` typically indicates that replacement values caused a schema violation, not a new set of `errors` that you'd ordinarily be able to save on rule trees. A value of `INTERRUPTED` indicates a server error.
                  type: string
                  enum:
                    - "PENDING"
                    - "SUBMITTED"
                    - "IN_PROGRESS"
                    - "COMPLETE"
                    - "INTERRUPTED"
                    - "SUBMISSION_ERROR"
      bulk-patch-post-response:
        description: |
          Provides a hypermedia link to a newly created resource. The response's single member name indicates the type of resource.
        type: object
        required:
          - "bulkPatchLink"
        properties:
          bulkPatchLink:
            description: |
              Links the newly created bulk patch process.
            type: string
    responses: {}
    parameters:
      trait_contractParamRequired_contractId:
        name: contractId
        in: query
        required: true
        description: |
          Unique identifier for the contract.
          See [ID prefixes](doc:id-prefixes)
          for details on omitting the value's `ctr_` prefix.
        schema:
          type: string
      trait_contractParamOptional_contractId:
        name: contractId
        in: query
        description: |
          Unique identifier for the contract.
          The parameter is optional if the property has been
          provisioned under only one contract.
          Otherwise you need to specify it along with the `groupId`.
          (In other operations that don't specify a `propertyId` URL
          parameter, this parameter is always required.)
          See [ID prefixes](doc:id-prefixes)
          for details on omitting the value's `ctr_` prefix.
        schema:
          type: string
      trait_contractParamOptionalBulk_contractId:
        name: contractId
        in: query
        description: |
          Optionally filters bulk searches to properties provisioned
          under the specified contract. For bulk operations, you can
          specify `contractId` and `groupId` independently from each
          other.
        schema:
          type: string
      trait_groupParamRequired_groupId:
        name: groupId
        in: query
        required: true
        description: |
          Unique identifier for the group.
          See [ID prefixes](doc:id-prefixes)
          for details on omitting the value's `grp_` prefix.
        schema:
          type: string
      trait_groupParamOptional_groupId:
        name: groupId
        in: query
        description: |
          Unique identifier for the group.
          The parameter is optional if the property has been
          provisioned under only one group.
          Otherwise you need to specify it along with the `contractId`.
          (In other operations that don't specify a `propertyId` URL
          parameter, this parameter is always required.)
          See [ID prefixes](doc:id-prefixes)
          for details on omitting the value's `grp_` prefix.
        schema:
          type: string
      trait_groupParamOptionalBulk_groupId:
        name: groupId
        in: query
        description: |
          Optionally filters bulk searches to properties provisioned
          under the specified group. For bulk operations, you can
          specify `contractId` and `groupId` independently from each
          other.
        schema:
          type: string
      trait_optionsParam_options:
        name: options
        in: query
        description: |
          Comma-separated list of options to enable; `mapDetails`
          enables extra mapping-related information.
        schema:
          type: string
      trait_validateHostnamesParam_validateHostnames:
        name: validateHostnames
        in: query
        description: |
          When `false` (the default), skips validation tests that
          would identify potential hostname-related problems within
          the response object's `errors` and `warnings` arrays. See
          [Property hostname errors](doc:property-hostname-errors)
          for details on relevant error feedback. See
          [Fast validation, activation, and fallback](doc:fast-validation)
          for details on the delays this might avoid.
        schema:
          default: true
          type: boolean
      trait_validateRulesParam_validateRules:
        name: validateRules
        in: query
        description: |
          Set to `true` by default. When `false`, skips validation
          tests that would identify potential problems within the
          response object's `errors` and `warnings` arrays. See the
          [JSON problems](doc:json-problem-responses)
          section for details on this error feedback. See
          [Fast validation, activation, and fallback](doc:fast-validation)
          for details on the delays this might avoid.
        schema:
          default: true
          type: boolean
      trait_validateModeParam_validateMode:
        name: validateMode
        in: query
        description: |
          With `validateRules` enabled, setting this to `fast`
          performs a quick validation check based on the provided
          JSON. This is faster than the default `full` validation,
          which performs more extensive checks on the converted XML
          metadata configuration.
        schema:
          default: full
          type: string
          enum:
            - "full"
            - "fast"
      trait_dryRunParam_dryRun:
        name: dryRun
        in: query
        description: |
          With `validateRules` also enabled, allows for a _dry run_ in
          order to gather any possible errors without saving the rule
          tree.
        schema:
          default: false
          type: boolean
      trait_paginated_offset:
        name: offset
        in: query
        description: |
          For paginated responses, specifies the page of results to
          include, starting from `0`.
        schema:
          minimum: 0
          type: integer
      trait_paginated_limit:
        name: limit
        in: query
        description: |
          For paginated responses, specifies the number of results to
          include on each page.
        schema:
          minimum: 1
          type: integer
      trait_usePrefixesHeader_PAPI-Use-Prefixes:
        name: "PAPI-Use-Prefixes"
        description: |
          Sets whether to display three-letter prefixes in various ID values in response data. This may override the client's default `usePrefixes` setting. See [ID Prefixes](doc:id-prefixes).
        in: header
        required: true
        schema:
          type: string
    examples: {}
    requestBodies: {}
    headers: {}
    securitySchemes: {}
    links: {}
    callbacks: {}
