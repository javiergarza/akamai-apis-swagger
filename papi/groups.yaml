---
  openapi: "3.0.0"
  servers:
    - url: https://akzz-XXXXXXXXXXXXXXXX-XXXXXXXXXXXXXXXX.luna.akamaiapis.net/papi/v1
  info:
    title: "Groups"
    version: v1
  paths:
    /groups:
      get:
        summary: List groups
        description: |
          You need information about the prevailing group to access most PAPI interfaces. This operation provides a read-only list of groups, which may contain properties. This operation provides a flat list of groups, along with `parentGroupId` information to structure them as a hierarchy. Each group also lists any available contracts that enable property features, but not which group contains a given property. The [Identity Management: User Administration API](http://learn.akamai.com/en-us/api/core_features/identity_management_user_admin/v2.html) allows you to associate properties with groups, and to modify the group hierarchy.  SIERRA TEST: See [ID prefixes](doc:id-prefixes). Links to guide doc work!
        operationId: "GET_groups"
        responses:
          200:
            description: ""
            content:
              application/json:
                example:
                  accountId: act_1-1TJZFB
                  accountName: "Example.com"
                  groups:
                    items:
                      - groupName: "Example.com-1-1TJZH5"
                        groupId: grp_15225
                        contractIds:
                          - "ctr_1-1TJZH5"
                      - groupName: "Test"
                        groupId: grp_15231
                        parentGroupId: grp_15225
                        contractIds:
                          - "ctr_1-1TJZH5"
                      - groupName: "TomTest"
                        groupId: grp_41443
                        parentGroupId: grp_15225
                        contractIds:
                          - "ctr_1-1TJZH5"
                schema:
                  $ref: "#/components/schemas/group-get-response"
        parameters:
          - $ref: "#/components/parameters/trait_usePrefixesHeader_PAPI-Use-Prefixes"
  components:
    schemas:
      group-get-response:
        description: |
          A common outer wrapping object structure that provides additional contextual details for a set of requested data. The data itself is available under various inner members' `items` array, even individual items. See [ID prefixes](doc:id-prefixes) for more information.
        type: object
        properties:
          accountId:
            type: string
          accountName:
            description: |
              A descriptive name for the account.
            type: string
          groups:
            description: |
              The set of requested groups, available within an `items` array.
            type: object
            properties:
              items:
                type: array
                items:
                  description: |
                    Encapsulates information about the group that contains a property and allows it to be deployed. Relevant response objects appear within the outer [Envelope](#envelope) object's `groups.items` array.
                  type: object
                  required:
                    - "contractIds"
                    - "groupId"
                    - "groupName"
                  properties:
                    contractIds:
                      type: array
                      items:
                        description: |
                          A set of string identifiers for contracts whose products can be applied to properties within a group.
                        type: string
                    groupId:
                      description: |
                        Uniquely identifies each group. See [ID prefixes](doc:id-prefixes) for details on how to omit the ID's `grp_` prefix.
                      type: string
                    groupName:
                      description: |
                        A descriptive label for the group.
                      type: string
                    parentGroupId:
                      description: |
                        Identifies another group as a parent, defining the relative location of the group within the group hierarchy. If omitted, it's the root-level group at the top of the hierarchy.
                      type: string
    responses: {}
    parameters:
      trait_contractParamRequired_contractId:
        name: contractId
        in: query
        required: true
        description: |
          Unique identifier for the contract.
          See [ID prefixes](doc:id-prefixes)
          for details on omitting the value's `ctr_` prefix.
        schema:
          type: string
      trait_contractParamOptional_contractId:
        name: contractId
        in: query
        description: |
          Unique identifier for the contract.
          The parameter is optional if the property has been
          provisioned under only one contract.
          Otherwise you need to specify it along with the `groupId`.
          (In other operations that don't specify a `propertyId` URL
          parameter, this parameter is always required.)
          See [ID prefixes](doc:id-prefixes)
          for details on omitting the value's `ctr_` prefix.
        schema:
          type: string
      trait_contractParamOptionalBulk_contractId:
        name: contractId
        in: query
        description: |
          Optionally filters bulk searches to properties provisioned
          under the specified contract. For bulk operations, you can
          specify `contractId` and `groupId` independently from each
          other.
        schema:
          type: string
      trait_groupParamRequired_groupId:
        name: groupId
        in: query
        required: true
        description: |
          Unique identifier for the group.
          See [ID prefixes](doc:id-prefixes)
          for details on omitting the value's `grp_` prefix.
        schema:
          type: string
      trait_groupParamOptional_groupId:
        name: groupId
        in: query
        description: |
          Unique identifier for the group.
          The parameter is optional if the property has been
          provisioned under only one group.
          Otherwise you need to specify it along with the `contractId`.
          (In other operations that don't specify a `propertyId` URL
          parameter, this parameter is always required.)
          See [ID prefixes](doc:id-prefixes)
          for details on omitting the value's `grp_` prefix.
        schema:
          type: string
      trait_groupParamOptionalBulk_groupId:
        name: groupId
        in: query
        description: |
          Optionally filters bulk searches to properties provisioned
          under the specified group. For bulk operations, you can
          specify `contractId` and `groupId` independently from each
          other.
        schema:
          type: string
      trait_optionsParam_options:
        name: options
        in: query
        description: |
          Comma-separated list of options to enable; `mapDetails`
          enables extra mapping-related information.
        schema:
          type: string
      trait_validateHostnamesParam_validateHostnames:
        name: validateHostnames
        in: query
        description: |
          When `false` (the default), skips validation tests that
          would identify potential hostname-related problems within
          the response object's `errors` and `warnings` arrays. See
          [Property hostname errors](doc:property-hostname-errors)
          for details on relevant error feedback. See
          [Fast validation, activation, and fallback](doc:fast-validation)
          for details on the delays this might avoid.
        schema:
          default: true
          type: boolean
      trait_validateRulesParam_validateRules:
        name: validateRules
        in: query
        description: |
          Set to `true` by default. When `false`, skips validation
          tests that would identify potential problems within the
          response object's `errors` and `warnings` arrays. See the
          [JSON problems](doc:json-problem-responses)
          section for details on this error feedback. See
          [Fast validation, activation, and fallback](doc:fast-validation)
          for details on the delays this might avoid.
        schema:
          default: true
          type: boolean
      trait_validateModeParam_validateMode:
        name: validateMode
        in: query
        description: |
          With `validateRules` enabled, setting this to `fast`
          performs a quick validation check based on the provided
          JSON. This is faster than the default `full` validation,
          which performs more extensive checks on the converted XML
          metadata configuration.
        schema:
          default: full
          type: string
          enum:
            - "full"
            - "fast"
      trait_dryRunParam_dryRun:
        name: dryRun
        in: query
        description: |
          With `validateRules` also enabled, allows for a _dry run_ in
          order to gather any possible errors without saving the rule
          tree.
        schema:
          default: false
          type: boolean
      trait_paginated_offset:
        name: offset
        in: query
        description: |
          For paginated responses, specifies the page of results to
          include, starting from `0`.
        schema:
          minimum: 0
          type: integer
      trait_paginated_limit:
        name: limit
        in: query
        description: |
          For paginated responses, specifies the number of results to
          include on each page.
        schema:
          minimum: 1
          type: integer
      trait_usePrefixesHeader_PAPI-Use-Prefixes:
        name: "PAPI-Use-Prefixes"
        description: |
          Sets whether to display three-letter prefixes in various ID values in response data. This may override the client's default `usePrefixes` setting. See [ID Prefixes](doc:id-prefixes).
        in: header
        required: true
        schema:
          type: string
    examples: {}
    requestBodies: {}
    headers: {}
    securitySchemes: {}
    links: {}
    callbacks: {}
