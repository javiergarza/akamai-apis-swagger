---
  openapi: "3.0.0"
  servers:
    - url: https://akzz-XXXXXXXXXXXXXXXX-XXXXXXXXXXXXXXXX.luna.akamaiapis.net/papi/v1
  info:
    title: "Schemas"
    version: v1
  paths:
    /schemas/request/{filename}:
      get:
        summary: Get a request's schema
        description: |
          Fetch the JSON schema for a particular request. These are typically linked from error messages about schema mismatches.
        operationId: "GET_schemas-request-filename"
        responses:
          200:
            description: ""
            content:
              application/json:
                schema:
                  example:
                    $schema: "http://json-schema.org/draft-04-schema#"
                    id: "resource:/descriptors/papi/v0/schemas/CreateNewEdgeHostnameRequestV0.json#"
                    javaType: "com.akamai.luna.papi.model.EdgeHostnameCreateRequest"
                    type: object
                    required:
                      - "domainPrefix"
                      - "domainSuffix"
                      - "ipVersionBehavior"
                      - "productId"
                    properties:
                      productId:
                        type: string
                      domainPrefix:
                        description: |
                          The origin domain portion of the edge hostname. An edge hostname consists of a customer-specific `namePrefix` such as `www.example.com` and an Akamai-specific `domainSuffix` such as `edgesuite.net`. The edge hostname's final DNS CNAME combines the two, for example, `www.example.com.edgesuite.net`.
                        type: string
                      domainSuffix:
                        type: string
                      secure:
                        type: boolean
                      ipVersionBehavior:
                        type: string
                        enum:
                          - "IPV4"
                          - "IPV6_COMPLIANCE"
                          - "IPV6_PERFORMANCE"
                      slotNumber:
                        description: |
                          On POST, sets the slot number for secure ESSL properties.
                        type: integer
      parameters:
        - name: filename
          in: path
          required: true
          description: |
            Schema's filename.
          schema:
            type: string
    /schemas/products/{productId}/{ruleFormat}:
      get:
        summary: Get a rule format's schema
        description: |
          Get the JSON schema for the given product and rule format, which you can use to validate a rule tree object. Note that your rule tree may still fail to activate if you specify features that are optional within the schema for a product but not currently supported on your contract. To validate the set of currently available features you want to activate, run [List available behaviors](https://papi-akamai.readme.io/reference-link/get_properties-propertyid-versions-propertyversion-available-behaviors) and [List available criteria](https://papi-akamai.readme.io/reference/propertiespropertyidversionspropertyversionavailable-criteria#get_properties-propertyid-versions-propertyversion-available-criteria).
        operationId: "GET_schemas-products-productId-ruleFormat"
        responses:
          200:
            description: ""
            content:
              application/json:
                schema:
                  example:
                    type: object
                    required:
                      - "rules"
                    properties:
                      rules:
                        type: object
      parameters:
        - name: ruleFormat
          in: path
          required: true
          description: |
            Name of the rule format, either one frozen to a specific
            date, or representing the `latest` set of behaviors and
            criteria.
          schema:
            type: string
        - name: productId
          in: path
          required: true
          description: |
            Unique identifier for the product.
            See [ID prefixes](doc:id-prefixes)
            for details on omitting the value's `prd_` prefix.
          schema:
            type: string
  components:
    schemas: {}
    responses: {}
    parameters:
      trait_contractParamRequired_contractId:
        name: contractId
        in: query
        required: true
        description: |
          Unique identifier for the contract.
          See [ID prefixes](doc:id-prefixes)
          for details on omitting the value's `ctr_` prefix.
        schema:
          type: string
      trait_contractParamOptional_contractId:
        name: contractId
        in: query
        description: |
          Unique identifier for the contract.
          The parameter is optional if the property has been
          provisioned under only one contract.
          Otherwise you need to specify it along with the `groupId`.
          (In other operations that don't specify a `propertyId` URL
          parameter, this parameter is always required.)
          See [ID prefixes](doc:id-prefixes)
          for details on omitting the value's `ctr_` prefix.
        schema:
          type: string
      trait_contractParamOptionalBulk_contractId:
        name: contractId
        in: query
        description: |
          Optionally filters bulk searches to properties provisioned
          under the specified contract. For bulk operations, you can
          specify `contractId` and `groupId` independently from each
          other.
        schema:
          type: string
      trait_groupParamRequired_groupId:
        name: groupId
        in: query
        required: true
        description: |
          Unique identifier for the group.
          See [ID prefixes](doc:id-prefixes)
          for details on omitting the value's `grp_` prefix.
        schema:
          type: string
      trait_groupParamOptional_groupId:
        name: groupId
        in: query
        description: |
          Unique identifier for the group.
          The parameter is optional if the property has been
          provisioned under only one group.
          Otherwise you need to specify it along with the `contractId`.
          (In other operations that don't specify a `propertyId` URL
          parameter, this parameter is always required.)
          See [ID prefixes](doc:id-prefixes)
          for details on omitting the value's `grp_` prefix.
        schema:
          type: string
      trait_groupParamOptionalBulk_groupId:
        name: groupId
        in: query
        description: |
          Optionally filters bulk searches to properties provisioned
          under the specified group. For bulk operations, you can
          specify `contractId` and `groupId` independently from each
          other.
        schema:
          type: string
      trait_optionsParam_options:
        name: options
        in: query
        description: |
          Comma-separated list of options to enable; `mapDetails`
          enables extra mapping-related information.
        schema:
          type: string
      trait_validateHostnamesParam_validateHostnames:
        name: validateHostnames
        in: query
        description: |
          When `false` (the default), skips validation tests that
          would identify potential hostname-related problems within
          the response object's `errors` and `warnings` arrays. See
          [Property hostname errors](doc:property-hostname-errors)
          for details on relevant error feedback. See
          [Fast validation, activation, and fallback](doc:fast-validation)
          for details on the delays this might avoid.
        schema:
          default: true
          type: boolean
      trait_validateRulesParam_validateRules:
        name: validateRules
        in: query
        description: |
          Set to `true` by default. When `false`, skips validation
          tests that would identify potential problems within the
          response object's `errors` and `warnings` arrays. See the
          [JSON problems](doc:json-problem-responses)
          section for details on this error feedback. See
          [Fast validation, activation, and fallback](doc:fast-validation)
          for details on the delays this might avoid.
        schema:
          default: true
          type: boolean
      trait_validateModeParam_validateMode:
        name: validateMode
        in: query
        description: |
          With `validateRules` enabled, setting this to `fast`
          performs a quick validation check based on the provided
          JSON. This is faster than the default `full` validation,
          which performs more extensive checks on the converted XML
          metadata configuration.
        schema:
          default: full
          type: string
          enum:
            - "full"
            - "fast"
      trait_dryRunParam_dryRun:
        name: dryRun
        in: query
        description: |
          With `validateRules` also enabled, allows for a _dry run_ in
          order to gather any possible errors without saving the rule
          tree.
        schema:
          default: false
          type: boolean
      trait_paginated_offset:
        name: offset
        in: query
        description: |
          For paginated responses, specifies the page of results to
          include, starting from `0`.
        schema:
          minimum: 0
          type: integer
      trait_paginated_limit:
        name: limit
        in: query
        description: |
          For paginated responses, specifies the number of results to
          include on each page.
        schema:
          minimum: 1
          type: integer
      trait_usePrefixesHeader_PAPI-Use-Prefixes:
        name: "PAPI-Use-Prefixes"
        description: |
          Sets whether to display three-letter prefixes in various ID values in response data. This may override the client's default `usePrefixes` setting. See [ID Prefixes](doc:id-prefixes).
        in: header
        required: true
        schema:
          type: string
    examples: {}
    requestBodies: {}
    headers: {}
    securitySchemes: {}
    links: {}
    callbacks: {}
