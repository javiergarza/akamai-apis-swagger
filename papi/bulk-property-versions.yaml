---
  openapi: "3.0.0"
  servers:
    - url: https://akzz-XXXXXXXXXXXXXXXX-XXXXXXXXXXXXXXXX.luna.akamaiapis.net/papi/v1
  info:
    title: "Bulk versioning"
    version: v1
  paths:
    /bulk/property-version-creations:
      post:
        summary: Bulk version a set of properties
        description: |
          POST a [BulkVersion](#bulkversion) object to create new
          versions of a set of properties based on any previous version.
          This operation launches an asynchronous process to increment
          versions. To check its progress,
          run the [List bulk-versioned properties](https://papi-akamai.readme.io/reference/bulkproperty-version-creationsbulkcreateid#get_bulk-property-version-creations-bulkcreateid)
          operation, whose link is available in the `Location` header or
          `bulkCreateVersionLink` member of this operation's response.
          Run this operation only after
          [bulk searching](https://papi-akamai.readme.io/reference/bulkrules-search-requests#post_bulk-rules-search-requests) a set of properties you want
          to change, to prepare new versions to bulk patch. See
          [Bulk Search and Update](doc:learn-about-bulk)
          for guidance on this feature.
        operationId: "POST_bulk-property-version-creations"
        responses:
          202:
            description: ""
            headers:
              Location:
                schema:
                  type: string
            content:
              application/json:
                example:
                  bulkCreateVersionLink: "/papi/v0/bulk/property-version-creations/737"
                schema:
                  $ref: "#/components/schemas/bulk-property-version-post-response"
        requestBody:
          required: true
          content:
            application/json:
              example:
                createPropertyVersions:
                  - propertyId: prp_1
                    createFromVersion: 1
                    createFromVersionEtag: "2641910c585cf67b"
                  - propertyId: prp_15
                    createFromVersion: 2
                    createFromVersionEtag: "343410c585cf67fc"
                  - propertyId: prp_3
                    createFromVersion: 10
                    createFromVersionEtag: "6c7v5c65c6cvcv65"
              schema:
                $ref: "#/components/schemas/bulk-property-version-create-request"
        parameters:
          - name: "PAPI-Use-Prefixes"
            description: |
              Sets whether to display three-letter prefixes in various ID values in response data. This may override the client's default `usePrefixes` setting. See [ID Prefixes](doc:id-prefixes).
            in: header
            required: true
            schema:
              type: string
          - $ref: "#/components/parameters/trait_contractParamOptionalBulk_contractId"
          - $ref: "#/components/parameters/trait_groupParamOptionalBulk_groupId"
    /bulk/property-version-creations/{bulkCreateId}:
      get:
        summary: List bulk-versioned properties
        description: |
          List all new property versions that result from a [bulk versioning request](https://papi-akamai.readme.io/reference/bulkproperty-version-creations#post_bulk-property-version-creations), and poll the asynchronous process's status. The response is a [BulkVersion](#bulkversion) GET object. After the `bulkCreateVersionsStatus` is `COMPLETE`, use the new version numbers along with search paths from a [bulk search](https://papi-akamai.readme.io/reference/bulkrules-search-requests#post_bulk-rules-search-requests) operation to [bulk patch](https://papi-akamai.readme.io/reference/bulkrules-patch-requests#post_bulk-rules-patch-requests) them. See [Bulk Search and Update](doc:learn-about-bulk) for guidance.
        operationId: "GET_bulk-property-version-creations-bulkCreateId"
        responses:
          200:
            description: ""
            content:
              application/json:
                example:
                  bulkCreateId: 9
                  bulkCreateVersionsStatus: "IN_PROGRESS"
                  bulkCreateVersionSubmitDate: "2018-01-18T00:00:00Z"
                  bulkCreateVersionUpdateDate: "2018-01-18T00:00:00Z"
                  createPropertyVersions:
                    - propertyId: prp_1
                      createFromVersion: 1
                      createFromVersionEtag: "343410c585cf67fb"
                      propertyVersion: 2
                      createVersionStatus: "PENDING"
                      createVersionSubmitDate: "2018-01-18T00:00:00Z"
                      createVersionUpdateDate: "2018-01-18T00:00:00Z"
                    - propertyId: prp_15
                      createFromVersion: 2
                      createFromVersionEtag: "343410c585cf67fc"
                      propertyVersion: 3
                      createVersionStatus: "IN_PROGRESS"
                      propertyVersionLink: null
                      createVersionSubmitDate: "2018-01-18T00:00:00Z"
                      createVersionUpdateDate: "2018-01-18T00:00:00Z"
                    - propertyId: prp_3
                      createFromVersion: 10
                      createFromVersionEtag: "6c7v5c65c6cvcv65"
                      propertyVersion: 11
                      createVersionStatus: "COMPLETE"
                      propertyVersionLink: "/papi/v1/properties/prp_3/versions/11?contractId=ctr_1-TJZFW&groupId=grp_15166"
                      createVersionSubmitDate: "2018-01-18T00:00:00Z"
                      createVersionUpdateDate: "2018-01-18T00:00:00Z"
                schema:
                  $ref: "#/components/schemas/bulk-property-version-get-response"
        parameters:
          - $ref: "#/components/parameters/trait_usePrefixesHeader_PAPI-Use-Prefixes"
          - $ref: "#/components/parameters/trait_contractParamOptionalBulk_contractId"
          - $ref: "#/components/parameters/trait_groupParamOptionalBulk_groupId"
      parameters:
        - name: bulkCreateId
          in: path
          required: true
          description: |
            Identifies each bulk-versioning job.
          schema:
            type: integer
  components:
    schemas:
      bulk-property-version-create-request:
        description: |
          Encapsulates a set of properties from which to bulk create new versions.
        type: object
        required:
          - "createPropertyVersions"
        properties:
          createPropertyVersions:
            type: array
            items:
              description: |
                Encapsulates information about each new property version to create.
              type: object
              required:
                - "propertyId"
                - "createFromVersion"
              properties:
                propertyId:
                  pattern: "^(prp_|PRP_)?[0-9]+$"
                  description: |
                    Identifies the property for which to create a new version.
                  type: string
                createFromVersion:
                  description: |
                    The property version on which to base the new version.
                  type: integer
                createFromVersionEtag:
                  description: |
                    The data digest of the version on which to base the new version. If the digest doesn't match the current state of the version, batch-versioning fails for this property. See [Concurrency control](doc:concurrency-control) for guidance.
                  type: string
      bulk-property-version-get-response:
        description: |
          Encapsulates a set of properties from which to bulk create new versions. See [Bulk Search and Update](doc:learn-about-bulk) for guidance on this feature.
        type: object
        required:
          - "bulkCreateId"
          - "bulkCreateVersionsStatus"
          - "bulkCreateVersionSubmitDate"
          - "bulkCreateVersionUpdateDate"
        properties:
          bulkCreateId:
            description: |
              Identifies each bulk-versioning process.
            type: integer
          bulkCreateVersionsStatus:
            description: |
              Tracks the status of the overall bulk versioning request, either `PENDING`, `IN_PROGRESS`, or `COMPLETE`.
            type: string
            enum:
              - "PENDING"
              - "COMPLETE"
              - "IN_PROGRESS"
          bulkCreateVersionSubmitDate:
            description: |
              An ISO 8601 timestamp indicating when the bulk versioning request occurred.
            type: string
          bulkCreateVersionUpdateDate:
            description: |
              An ISO 8601 timestamp indicating when the bulk versioning request most recently updated with changes to versions' status. The value may be `null` when the bulk version request first occurs.
            type: string
          message:
            description: |
              A notification in case the bulk request repeatedly fails to process.
            type: string
          createPropertyVersions:
            type: array
            items:
              description: |
                Encapsulates information about each new property version to create.
              type: object
              required:
                - "propertyId"
                - "createFromVersion"
                - "createVersionStatus"
                - "createVersionSubmitDate"
                - "createVersionUpdateDate"
              properties:
                propertyId:
                  description: |
                    Identifies the property for which to create a new version.
                  type: string
                createFromVersion:
                  description: |
                    The property version on which to base the new version.
                  type: integer
                createFromVersionEtag:
                  description: |
                    The data digest of the version on which to base the new version. If the digest doesn't match the current state of the version, batch-versioning fails for this property. See [Concurrency control](doc:concurrency-control) for guidance.
                  type: string
                propertyVersion:
                  minimum: 1
                  description: |
                    Reflects the new version for this property resulting from the batch-versioning request.
                  type: integer
                createVersionStatus:
                  description: |
                    Tracks the status of the versioning request for this property, either `PENDING`, `SUBMITTED`, `IN_PROGRESS`, or `COMPLETE`, indicating success. A `SUBMISSION_ERROR` means the versioning failed, for example, if the `createFromVersionEtag` didn't reflect the version's current state. A value of `INTERRUPTED` indicates a server error.
                  type: string
                  enum:
                    - "PENDING"
                    - "SUBMITTED"
                    - "IN_PROGRESS"
                    - "COMPLETE"
                    - "INTERRUPTED"
                    - "SUBMISSION_ERROR"
                propertyVersionLink:
                  description: |
                    Provides an API hypermedia link to each newly created property version. Prior to creation, the value is `null`.
                  type: string
                etag:
                  description: |
                    A digest with which to check the integrity of the newly created version's data when making any subsequent modifications. See [Concurrency control](doc:concurrency-control) for guidance. The value may appear as `null` prior to the new version's creation.
                  type: string
                createVersionSubmitDate:
                  description: |
                    An ISO 8601 timestamp indicating when the request for a new version occurred. Note that this occurs asynchronously, and doesn't match when the overall bulk versioning request occurred.
                  type: string
                createVersionUpdateDate:
                  description: |
                    An ISO 8601 timestamp indicating when the `createVersionStatus` last updated.
                  type: string
      bulk-property-version-post-response:
        description: |
          Provides a hypermedia link to a newly created resource. The response's single member name indicates the type of resource.
        type: object
        required:
          - "bulkCreateVersionLink"
        properties:
          bulkCreateVersionLink:
            description: |
              Links the newly created bulk versioning process.
            type: string
    responses: {}
    parameters:
      trait_contractParamRequired_contractId:
        name: contractId
        in: query
        required: true
        description: |
          Unique identifier for the contract.
          See [ID prefixes](doc:id-prefixes)
          for details on omitting the value's `ctr_` prefix.
        schema:
          type: string
      trait_contractParamOptional_contractId:
        name: contractId
        in: query
        description: |
          Unique identifier for the contract.
          The parameter is optional if the property has been
          provisioned under only one contract.
          Otherwise you need to specify it along with the `groupId`.
          (In other operations that don't specify a `propertyId` URL
          parameter, this parameter is always required.)
          See [ID prefixes](doc:id-prefixes)
          for details on omitting the value's `ctr_` prefix.
        schema:
          type: string
      trait_contractParamOptionalBulk_contractId:
        name: contractId
        in: query
        description: |
          Optionally filters bulk searches to properties provisioned
          under the specified contract. For bulk operations, you can
          specify `contractId` and `groupId` independently from each
          other.
        schema:
          type: string
      trait_groupParamRequired_groupId:
        name: groupId
        in: query
        required: true
        description: |
          Unique identifier for the group.
          See [ID prefixes](doc:id-prefixes)
          for details on omitting the value's `grp_` prefix.
        schema:
          type: string
      trait_groupParamOptional_groupId:
        name: groupId
        in: query
        description: |
          Unique identifier for the group.
          The parameter is optional if the property has been
          provisioned under only one group.
          Otherwise you need to specify it along with the `contractId`.
          (In other operations that don't specify a `propertyId` URL
          parameter, this parameter is always required.)
          See [ID prefixes](doc:id-prefixes)
          for details on omitting the value's `grp_` prefix.
        schema:
          type: string
      trait_groupParamOptionalBulk_groupId:
        name: groupId
        in: query
        description: |
          Optionally filters bulk searches to properties provisioned
          under the specified group. For bulk operations, you can
          specify `contractId` and `groupId` independently from each
          other.
        schema:
          type: string
      trait_optionsParam_options:
        name: options
        in: query
        description: |
          Comma-separated list of options to enable; `mapDetails`
          enables extra mapping-related information.
        schema:
          type: string
      trait_validateHostnamesParam_validateHostnames:
        name: validateHostnames
        in: query
        description: |
          When `false` (the default), skips validation tests that
          would identify potential hostname-related problems within
          the response object's `errors` and `warnings` arrays. See
          [Property hostname errors](doc:property-hostname-errors)
          for details on relevant error feedback. See
          [Fast validation, activation, and fallback](doc:fast-validation)
          for details on the delays this might avoid.
        schema:
          default: true
          type: boolean
      trait_validateRulesParam_validateRules:
        name: validateRules
        in: query
        description: |
          Set to `true` by default. When `false`, skips validation
          tests that would identify potential problems within the
          response object's `errors` and `warnings` arrays. See the
          [JSON problems](doc:json-problem-responses)
          section for details on this error feedback. See
          [Fast validation, activation, and fallback](doc:fast-validation)
          for details on the delays this might avoid.
        schema:
          default: true
          type: boolean
      trait_validateModeParam_validateMode:
        name: validateMode
        in: query
        description: |
          With `validateRules` enabled, setting this to `fast`
          performs a quick validation check based on the provided
          JSON. This is faster than the default `full` validation,
          which performs more extensive checks on the converted XML
          metadata configuration.
        schema:
          default: full
          type: string
          enum:
            - "full"
            - "fast"
      trait_dryRunParam_dryRun:
        name: dryRun
        in: query
        description: |
          With `validateRules` also enabled, allows for a _dry run_ in
          order to gather any possible errors without saving the rule
          tree.
        schema:
          default: false
          type: boolean
      trait_paginated_offset:
        name: offset
        in: query
        description: |
          For paginated responses, specifies the page of results to
          include, starting from `0`.
        schema:
          minimum: 0
          type: integer
      trait_paginated_limit:
        name: limit
        in: query
        description: |
          For paginated responses, specifies the number of results to
          include on each page.
        schema:
          minimum: 1
          type: integer
      trait_usePrefixesHeader_PAPI-Use-Prefixes:
        name: "PAPI-Use-Prefixes"
        description: |
          Sets whether to display three-letter prefixes in various ID values in response data. This may override the client's default `usePrefixes` setting. See [ID Prefixes](doc:id-prefixes).
        in: header
        required: true
        schema:
          type: string
    examples: {}
    requestBodies: {}
    headers: {}
    securitySchemes: {}
    links: {}
    callbacks: {}
