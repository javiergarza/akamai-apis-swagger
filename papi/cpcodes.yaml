---
  openapi: "3.0.0"
  servers:
    - url: https://akzz-XXXXXXXXXXXXXXXX-XXXXXXXXXXXXXXXX.luna.akamaiapis.net/papi/v1
  info:
    title: "CP codes"
    version: v1
  paths:
    /cpcodes:
      get:
        summary: List CP codes
        description: |
          This operation lists CP codes available within your contract and group pairing, which you assign to a property within its rule tree. CP codes include information about the product under which they were generated. When [creating a new property](https://papi-akamai.readme.io/reference/properties#post_properties), you should apply the same product under which the associated CP code was created.
        operationId: "GET_cpcodes"
        responses:
          200:
            description: ""
            content:
              application/json:
                example:
                  accountId: act_1-1TJZFB
                  contractId: ctr_1-1TJZFW
                  groupId: grp_15225
                  cpcodes:
                    items:
                      - cpcodeId: cpc_33190
                        cpcodeName: "SME WAA"
                        createdDate: "2015-03-02T15:06:13Z"
                        productIds:
                          - "prd_Web_App_Accel"
                schema:
                  $ref: "#/components/schemas/cpcode-get-response"
        parameters:
          - $ref: "#/components/parameters/trait_usePrefixesHeader_PAPI-Use-Prefixes"
          - $ref: "#/components/parameters/trait_contractParamRequired_contractId"
          - $ref: "#/components/parameters/trait_groupParamRequired_groupId"
      post:
        summary: Create a new CP code
        description: |
          To create a new CP code, you need to
          associate it with a product. You can assign any CP code within
          a property's rule tree as detailed in the
          [Rule Trees](doc:rule-trees)
          section. You should match the same `productId` that's assigned
          to properties that invoke the CP code to the one assigned to the
          CP code, otherwise you may get a warning.
        operationId: "POST_cpcodes"
        responses:
          201:
            description: ""
            headers:
              Location:
                schema:
                  type: string
            content:
              application/json:
                example:
                  cpcodeLink: "/papi/v0/cpcodes/cpc_33190?contractId=ctr_1-1TJZFW&groupId=grp_15166"
                schema:
                  $ref: "#/components/schemas/cpcode-post-response"
        requestBody:
          required: true
          content:
            application/json:
              example:
                productId: prd_Web_App_Accel
                cpcodeName: "SME WAA"
              schema:
                $ref: "#/components/schemas/cpcode-create-request"
        parameters:
          - $ref: "#/components/parameters/trait_usePrefixesHeader_PAPI-Use-Prefixes"
          - $ref: "#/components/parameters/trait_contractParamRequired_contractId"
          - $ref: "#/components/parameters/trait_groupParamRequired_groupId"
    /cpcodes/{cpcodeId}:
      get:
        summary: Get a CP code
        description: |
          This operation gets details about a CP code.
        operationId: "GET_cpcodes-cpcodeId"
        responses:
          200:
            description: ""
            content:
              application/json:
                example:
                  accountId: act_1-1TJZFB
                  contractId: ctr_1-1TJZFW
                  groupId: grp_15166
                  cpcodes:
                    items:
                      - cpcodeId: cpc_33190
                        cpcodeName: "SME WAA"
                        createdDate: "2015-03-02T15:06:13Z"
                        productIds:
                          - "prd_Web_App_Accel"
                schema:
                  $ref: "#/components/schemas/cpcode-get-response"
        parameters:
          - $ref: "#/components/parameters/trait_usePrefixesHeader_PAPI-Use-Prefixes"
          - $ref: "#/components/parameters/trait_contractParamRequired_contractId"
          - $ref: "#/components/parameters/trait_groupParamRequired_groupId"
      parameters:
        - name: cpcodeId
          in: path
          required: true
          description: |
            Unique identifier for the CP code.
            See [ID prefixes](doc:id-prefixes)
            for details on omitting the value's `cpc_` prefix.
          schema:
            type: string
  components:
    schemas:
      cpcode-create-request:
        description: |
          Specifies billing and reporting codes. To make a POST request that creates a new CP code, specify an object with `productId` and `cpcodeName` members. Relevant response objects appear within the outer [Envelope](#envelope) object's `cpcodes.items` array.
        type: object
        required:
          - "productId"
          - "cpcodeName"
        properties:
          productId:
            description: |
              On POST, the product to assign to this CP code. See [ID prefixes](doc:id-prefixes) for details on how to omit the ID's `prd_` prefix.
            type: string
          cpcodeName:
            description: |
              A descriptive label for the CP code. The name can't include commas, underscores, quotes, or any of these special characters: `^ # %`.
            type: string
      cpcode-get-response:
        description: |
          A common outer wrapping object structure that provides additional contextual details for a set of requested data. The data itself is available under various inner members' `items` array, even individual items. See [ID prefixes](doc:id-prefixes) for more information.
        type: object
        properties:
          accountId:
            type: string
          contractId:
            type: string
            default: SIERRA
          cpcodes:
            description: |
              The set of requested CP codes, available within an `items` array.
            type: object
            properties:
              items:
                type: array
                items:
                  description: |
                    Specifies billing and reporting codes. To make a POST request that creates a new CP code, specify an object with `productId` and `cpcodeName` members. Relevant response objects appear within the outer [Envelope](#envelope) object's `cpcodes.items` array.
                  type: object
                  required:
                    - "cpcodeId"
                    - "cpcodeName"
                    - "createdDate"
                    - "productIds"
                  properties:
                    cpcodeId:
                      description: |
                        Uniquely identifies each CP code. See [ID prefixes](doc:id-prefixes) for details on how to omit the ID's `cpc_` prefix.
                      type: string
                    cpcodeName:
                      type: string
                    createdDate:
                      description: |
                        A time stamp for the CP code.
                      type: string
                    productIds:
                      type: array
                      items:
                        description: |
                          On GET, lists identifiers for products assigned to this CP code, including the one specified by `productId` when you initially POST a new object. Note that PAPI doesn't support Property Manager's ability to assign more than one product to a CP code.
                        type: string
          groupId:
            type: string
      cpcode-post-response:
        description: |
          Provides a hypermedia link to a newly created resource. The response's single member name indicates the type of resource.
        type: object
        required:
          - "cpcodeLink"
        properties:
          cpcodeLink:
            description: |
              Links the newly created CP code.
            type: string
    responses: {}
    parameters:
      trait_contractParamRequired_contractId:
        name: contractId
        in: query
        required: true
        description: |
          Unique identifier for the contract.
          See [ID prefixes](doc:id-prefixes)
          for details on omitting the value's `ctr_` prefix.
        schema:
          type: string
      trait_contractParamOptional_contractId:
        name: contractId
        in: query
        description: |
          Unique identifier for the contract.
          The parameter is optional if the property has been
          provisioned under only one contract.
          Otherwise you need to specify it along with the `groupId`.
          (In other operations that don't specify a `propertyId` URL
          parameter, this parameter is always required.)
          See [ID prefixes](doc:id-prefixes)
          for details on omitting the value's `ctr_` prefix.
        schema:
          type: string
      trait_contractParamOptionalBulk_contractId:
        name: contractId
        in: query
        description: |
          Optionally filters bulk searches to properties provisioned
          under the specified contract. For bulk operations, you can
          specify `contractId` and `groupId` independently from each
          other.
        schema:
          type: string
      trait_groupParamRequired_groupId:
        name: groupId
        in: query
        required: true
        description: |
          Unique identifier for the group.
          See [ID prefixes](doc:id-prefixes)
          for details on omitting the value's `grp_` prefix.
        schema:
          type: string
      trait_groupParamOptional_groupId:
        name: groupId
        in: query
        description: |
          Unique identifier for the group.
          The parameter is optional if the property has been
          provisioned under only one group.
          Otherwise you need to specify it along with the `contractId`.
          (In other operations that don't specify a `propertyId` URL
          parameter, this parameter is always required.)
          See [ID prefixes](doc:id-prefixes)
          for details on omitting the value's `grp_` prefix.
        schema:
          type: string
      trait_groupParamOptionalBulk_groupId:
        name: groupId
        in: query
        description: |
          Optionally filters bulk searches to properties provisioned
          under the specified group. For bulk operations, you can
          specify `contractId` and `groupId` independently from each
          other.
        schema:
          type: string
      trait_optionsParam_options:
        name: options
        in: query
        description: |
          Comma-separated list of options to enable; `mapDetails`
          enables extra mapping-related information.
        schema:
          type: string
      trait_validateHostnamesParam_validateHostnames:
        name: validateHostnames
        in: query
        description: |
          When `false` (the default), skips validation tests that
          would identify potential hostname-related problems within
          the response object's `errors` and `warnings` arrays. See
          [Property hostname errors](doc:property-hostname-errors)
          for details on relevant error feedback. See
          [Fast validation, activation, and fallback](doc:fast-validation)
          for details on the delays this might avoid.
        schema:
          default: true
          type: boolean
      trait_validateRulesParam_validateRules:
        name: validateRules
        in: query
        description: |
          Set to `true` by default. When `false`, skips validation
          tests that would identify potential problems within the
          response object's `errors` and `warnings` arrays. See the
          [JSON problems](doc:json-problem-responses)
          section for details on this error feedback. See
          [Fast validation, activation, and fallback](doc:fast-validation)
          for details on the delays this might avoid.
        schema:
          default: true
          type: boolean
      trait_validateModeParam_validateMode:
        name: validateMode
        in: query
        description: |
          With `validateRules` enabled, setting this to `fast`
          performs a quick validation check based on the provided
          JSON. This is faster than the default `full` validation,
          which performs more extensive checks on the converted XML
          metadata configuration.
        schema:
          default: full
          type: string
          enum:
            - "full"
            - "fast"
      trait_dryRunParam_dryRun:
        name: dryRun
        in: query
        description: |
          With `validateRules` also enabled, allows for a _dry run_ in
          order to gather any possible errors without saving the rule
          tree.
        schema:
          default: false
          type: boolean
      trait_paginated_offset:
        name: offset
        in: query
        description: |
          For paginated responses, specifies the page of results to
          include, starting from `0`.
        schema:
          minimum: 0
          type: integer
      trait_paginated_limit:
        name: limit
        in: query
        description: |
          For paginated responses, specifies the number of results to
          include on each page.
        schema:
          minimum: 1
          type: integer
      trait_usePrefixesHeader_PAPI-Use-Prefixes:
        name: "PAPI-Use-Prefixes"
        description: |
          Sets whether to display three-letter prefixes in various ID values in response data. This may override the client's default `usePrefixes` setting. See [ID Prefixes](doc:id-prefixes).
        in: header
        required: true
        schema:
          type: string
    examples: {}
    requestBodies: {}
    headers: {}
    securitySchemes: {}
    links: {}
    callbacks: {}
