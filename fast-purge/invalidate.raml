#%RAML 0.8
title: Invalidations
version: 1
baseUri: /ccu/v3
mediaType: application/json

schemas:
  - CpCodeRequest: !include schemas/CPCodeRequest.json
  - TagRequest: !include schemas/TagRequest.json
  - UrlRequest: !include schemas/UrlRequest.json
  - Response: !include schemas/Response.json
traits:
  - perNetwork: !include traits/perNetwork.yaml

/invalidate/url/{network}:
  displayName: invalidate url
  is: [ perNetwork ]
  post:
    description: |
      Invalidate by URL or ARL: Invalidates content on the selected URL or ARL 
      for the selected `network`. You should consider invalidating
      content by default. This keeps each object in cache until the
      version on your origin server is newer.  Deletion retrieves the
      object regardless, which can dramatically increase the load on
      your origin server and would prevent Akamai from serving the
      old content if your origin is unreachable. URLs and ARLs can be 
      submitted in the same request. Note that it takes longer to purge ARLs when 
      using the [Control Center](https://control.akamai.com/apps/fast-purge/#/ccu-main) 
      interface. Use this API to purge them within five seconds.
    body:
      application/json:
        schema: UrlRequest
        example: !include examples/url_request.json
    responses:
      201:
        body:
          application/json:
            example: !include examples/201.json
            schema: Response
      400:
        body:
          application/json:
            schema: Response
      403:
        body:
          application/json:
            example: !include examples/403.json
            schema: Response
      429:
        body:
          application/json:
            example: !include examples/url_429.json
            schema: Response
      500:
        body:
          application/json:
            example: !include examples/500.json
            schema: Response
/invalidate/cpcode/{network}:
  displayName: invalidate cpcode
  is: [ perNetwork ]
  post:
    description: |
      Invalidate by CP code: Invalidates content on the selected CP
      code for the selected `network`.  You should consider
      invalidating content by default. This keeps each object in cache
      until the version on your origin server is newer.  Deletion
      retrieves the object regardless, which can dramatically increase
      the load on your origin server and would prevent Akamai from
      serving the old content if your origin is unreachable.
    body:
      application/json:
        schema: CpCodeRequest
        example: !include examples/cpcode_request.json
    responses:
      201:
        body:
          application/json:
            example: !include examples/201.json
            schema: Response
      400:
        body:
          application/json:
            schema: Response
      403:
        body:
          application/json:
            example: !include examples/403.json
            schema: Response
      429:
        body:
          application/json:
            example: !include examples/cpcode_429.json
            schema: Response
      500:
        body:
          application/json:
            example: !include examples/500.json
            schema: Response
/invalidate/tag/{network}:
  displayName: invalidate by cache tag
  is: [ perNetwork ]
  post:
    description: |
      Invalidate by cache tag: Invalidates content on the selected set
      of cache tags for the selected `network`.  You should consider
      invalidating content by default. This keeps each object in cache
      until the version on your origin server is newer.  Deletion
      retrieves the object regardless, which can dramatically increase
      the load on your origin server and would prevent Akamai from
      serving the old content if your origin is unreachable.
      
    body:
      application/json:
        schema: TagRequest
        example: !include examples/tag_request.json
    responses:
      201:
        body:
          application/json:
            example: !include examples/201.json
            schema: Response
      400:
        body:
          application/json:
            schema: Response
      403:
        body:
          application/json:
            example: !include examples/403.json
            schema: Response
      429:
        body:
          application/json:
            example: !include examples/tag_429.json
            schema: Response
      500:
        body:
          application/json:
            example: !include examples/500.json
            schema: Response
